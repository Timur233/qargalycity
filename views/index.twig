<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <title>{{ site_title }}</title>
    <link rel="shortcut icon" href="https://cms.abpx.kz/{{ site_favicon.path }}" type="image/png">
    <link rel="stylesheet" href="assets/css/swiper.min.css" />
    <link rel="stylesheet" href="assets/css/main.css">
    {# <link rel="stylesheet" href="assets/css/bootstrap.css?v=5" />
    <link rel="stylesheet" href="assets/css/libs/animate.css">
    <link rel="stylesheet" href="assets/css/all.min.css" />
    <link rel="stylesheet" href="assets/css/style.css?v=28" />
    <link rel="stylesheet" href="assets/css/new-styles.css" /> #}

    {{ site_scripts_in_head|raw }}
  
  </head>
  <body class="nightMode">
  {{ site_scripts_in_body|raw }}
  
  {# <div id="shadow" onclick="frontend.sidebar('open'); return false"></div>

    <div id="preloader">
      <div class="preloader-content">
        <img src="https://cms.abpx.kz{{ site_logo.path }}" style="width: 150px">
      </div>
    </div>

    <div class="sidebar position-fixed">
      <nav class="p-4 text-center h-100" style="display: flex; flex-direction: column;">
        <a href="#" class="close" onclick="frontend.sidebar('open'); return false"><span></span><span></span></a>
        <div class="lang-switcher px-4 pb-5">
          <a href="{% if lang != 'ru' %}?lang=ru{% else %}#{% endif %} " class="lang-switcher__item {% if lang == 'ru' %}lang-switcher__item-active{% endif %}">RUS</a>
          <a href="{% if lang != 'kk' %}?lang=kk{% else %}#{% endif %}" class="lang-switcher__item {% if lang == 'kk' %}lang-switcher__item-active{% endif %}">KZ</a>
        </div>
        <ul>
          <li>
            <a href="#about" onclick="frontend.sidebar('open');">{{ translate['about_of_project'] }}</a>
          </li>
          <li>
            <a href="#advantages" onclick="frontend.sidebar('open');">{{ translate['advantages'] }}</a>
          </li>
          <li>
            <a href="#gallery" onclick="frontend.sidebar('open');">{{ translate['gallery'] }}</a>
          </li>
          <li>
            <a href="#flats" onclick="frontend.sidebar('open');">{{ translate['flats'] }}</a>
          </li>
          <li>
            <a href="#aboutOfCompany" onclick="frontend.sidebar('open');">{{ translate['about_of_company'] }}</a>
          </li>
          <li>
            <a href="#contacts" onclick="frontend.sidebar('open');">{{ translate['contacts'] }}</a>
          </li>
        </ul>
        <div class="row mt-3 d-none">
          <div class="col-4">
            <a href="https://exin.kz/" target="_blank" onclick="frontend.sidebar('open');">
              <img src="https://cms.abpx.kz{{ exin_second_logo.path }}" class="w-75 h-80" alt="">
            </a>
          </div>
          <div class="col-4">
            <a href="#" onclick="frontend.sidebar('open');">
              <img src="https://cms.abpx.kz{{ site_second_logo.path }}" class="w-75 h-80" alt="">
            </a>
          </div>
          <div class="col-4">
            <a href="#" onclick="frontend.sidebar('open');">
              <img src="https://cms.abpx.kz{{ halyk_second_logo.path }}" class="w-75 h-80" alt="">
            </a>
          </div>
        </div>
        <div class="call mt-auto">
          <a href="https://instagram.com/{{ site_insta }}" target="_blank" class="insta"><i class="fab fa-instagram me-2"></i> {{ site_insta }}</a>
          <a href="tel:{{ site_phone }}" class="phone" onclick="frontend.sidebar('open');"><i class="fas fa-phone-alt me-2"></i> {{ site_phone }}</a>
          <a href="" class="btn btn-gradient" data-bs-toggle="modal" data-bs-target="#callbackModal" onclick="frontend.sidebar('open');">Оставить заявку</a>
        </div>
      </nav>
    </div> #}

    {{ include('widgets/_header.twig') }}

    {{ include('widgets/slider.twig') }}

    {{ include('widgets/about_project.twig') }}

    {{ include('widgets/gallery.twig') }}

    {{ include('widgets/horisontal_callback.twig') }}

    {{ include('widgets/locations_filter.twig') }}

    {{ include('widgets/map.twig') }}

    {{ include('widgets/horisontal_callback.twig') }}

    {{ include('widgets/building_steps.twig') }}

    {{ include('widgets/about_developer.twig') }}

    {{ include('widgets/footer.twig') }}

    <!-- Modal -->
    <div class="modal fade" id="callbackModal" tabindex="-1" aria-labelledby="callbackModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-body">
            <a href="#" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></a>
            <h5 class="modal-title" id="callbackModalLabel">Оставить заявку</h5>
            <form action="">
              <div class="mb-3">
                <input type="text" class="form-control" id="formName" name="name" placeholder="{{ translate['name'] }}" fieldname="Имя">
              </div>
              <div class="mb-3">
                <input type="text" class="form-control" id="formPhone" name="phone" placeholder="{{ translate['phone'] }}" fieldname="Телефон" required="">
              </div>
              <div>
                <a href="#" class="btn btn-gradient float-start sendFormButton" onclick="frontend.form(this); return false">{{ translate['send'] }}</a>
              </div>
              <!--div class="preloader" style="display: none">
                <img src="../assets/img/preloader" alt="">
              </div-->
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- Fixed Button -->
    <div class="fixed-callback">
      <a href="#" class="fix-button" data-bs-toggle="modal" data-bs-target="#callbackModal">
        <i class="fas fa-phone"></i>
      </a>
    </div>

  </body>

  <script src="assets/js/bootstrap.min.js"></script>
  <script src="assets/js/swiper.min.js"></script>
  <script src="assets/js/fslightbox.js"></script>
  <script
    src="https://api-maps.yandex.ru/2.1/?lang=ru_RU&amp;apikey=c931e95f-6835-4672-9786-8ec02a9db87a"
    type="text/javascript"
  ></script>

  <script>

    var translater = new Object({
      count_rooms: "{{ translate['count_rooms'] }}",
      floor: "{{ translate['floor'] }}",
      square: "{{ translate['square'] }}",
      download_plan: "{{ translate['download_plan'] }}",
      leave_a_request: "{{ translate['leave_a_request'] }}",
      no_valid_number: "{{ translate['no_valid_number'] }}",
      multiplier: "{{ translate['multiplier'] }}",
      multiplierX1: "{{ translate['multiplierX1'] }}"
    })

    var frontend = (function frontendModule() {

      function authorMarker() {
        console.log("%cExclusive Qurylys with Iskandarov Timur", "color:#fff; background-color:#7eb621; padding: 8px 15px; font-size: 14px; border-radius: 4px; text-align:center")
      }

      function paralaxSlider(offset) {
        if (offset <= 650) {
          const paralaxLayers = document.querySelectorAll('.parallax__layer');

          paralaxLayers.forEach((layer) => {
            const speed = layer.getAttribute('data-speed');
            const duration = layer.getAttribute('data-duration');
            const transform = offset/duration;

            layer.style.transition = speed + "s all";
            layer.style.transform = layer.style.transform.split(' ')[0] + " translateY(" + transform + "px)";
          });
        }
      }

      function creiateMap() {
        var map = document.querySelector('.dragscroll>img.map-image');
        var container = document.querySelector('.dragscroll');

        if (map) {
            showCenterMap()

            function showCenterMap() {
                map.style.position = 'absolute';
                let left = ((map.offsetWidth - container.offsetWidth) / 2) * -1
                let top = ((map.offsetHeight - container.offsetHeight) / 2) * -1
                map.style.left = left + 'px'
                map.style.top = top + 'px'
            }

            map.onmousedown = function(e) {

            var coords = getCoords(map);
            var shiftX = e.pageX - coords.left;
            var shiftY = e.pageY - coords.top;

            moveAt(e);

            function moveAt(e) {
                map.style.left = getLmits(e).left + 'px';
                map.style.top = getLmits(e).top + 'px';
            }

            function getLmits(e) {

                let left = e.pageX - container.offsetLeft - shiftX
                let top = e.pageY - container.offsetTop - shiftY

                if (left > 0) {
                left = 0
                }

                if (left < ((map.offsetWidth - container.offsetWidth) * -1))     {
                left = ((map.offsetWidth - container.offsetWidth) * -1)
                }

                if (top > 0) {
                top = 0
                }

                if (top < ((map.offsetHeight - container.offsetHeight) * -1))     {
                top = ((map.offsetHeight - container.offsetHeight) * -1)
                }

                return {
                left: left,
                top: top
                }

            }

            document.onmousemove = function(e) {
                moveAt(e);
            };

            map.onmouseup = function() {
                document.onmousemove = null;
                map.onmouseup = null;
            };

            }

            map.ondragstart = function() {
            return false;
            };

            function getCoords(elem) {   // кроме IE8-
            var box = elem.getBoundingClientRect();
            return {
                top: box.top + pageYOffset,
                left: box.left + pageXOffset
            };
            }
        }
      }

      function yandexMap() {
        let center = [43.26517742252108,76.81933862236538];
            if (window.outerWidth < 720) {
                center = [43.26619591975879,76.81612619737587];
            }

            searchMap = new ymaps.Map('interective-map', {
                center: center,
                zoom: 15,
                controls: ['zoomControl'],
            });

            cildrenCollection = new ymaps.GeoObjectCollection(null)
            medicalShopCollection = new ymaps.GeoObjectCollection(null)
            medicalCollection = new ymaps.GeoObjectCollection(null)
            schoolCollection = new ymaps.GeoObjectCollection(null)
            sportCollection = new ymaps.GeoObjectCollection(null)
            shopCollection = new ymaps.GeoObjectCollection(null)

            let cildren = [[43.261021076643196,76.81612130019033], [43.25476217515409,76.82390455273799], [43.2510892898689,76.81374941112043], [43.26781234306135,76.82536458428021], [43.26353144051317,76.82427024300216]]
            let medicalShop = [[43.26706937637685,76.81987142021771],[43.262512133313166,76.82266091759323]]
            let medical = [[43.264488005482406,76.82759618218061]]
            let school = [[43.257550503231634,76.81600903923626]]
            let sport = [[43.263807723747696,76.81751107628462], [43.25874240469048,76.81708192284226], [43.260796811258224,76.81457137520428]]
            let shop = [[43.260969315502756,76.81345557625413],[43.268292450736595,76.81965684349656],[43.265940362692085,76.82096576149581],[43.26361954611068,76.82094430382371],[43.261204547770184,76.82493543083784]]
            for (var i = 0, l = cildren.length; i < l; i++) {
                cildrenCollection.add(new ymaps.Placemark(cildren[i], {hintContent: 'Детский сад',balloonContent: ''},{iconLayout: 'default#image',
                    iconImageHref: 'https://shaharcity.kz/assets/img/map/childrens.svg',iconImageSize: [30, 40.9],iconImageOffset: [-15, -40.9],}));
            }
            for (var i = 0, l = medicalShop.length; i < l; i++) {
                medicalShopCollection.add(new ymaps.Placemark(medicalShop[i], {hintContent: 'Аптека',balloonContent: ''},{iconLayout: 'default#image',
                    iconImageHref: 'https://shaharcity.kz/assets/img/map/medical_shop.svg',iconImageSize: [30, 40.9],iconImageOffset: [-15, -40.9],}));
            }
            for (var i = 0, l = medical.length; i < l; i++) {
                medicalCollection.add(new ymaps.Placemark(medical[i], {hintContent: 'Поликлиника',balloonContent: ''},{iconLayout: 'default#image',
                    iconImageHref: 'https://shaharcity.kz/assets/img/map/medical_red.svg',iconImageSize: [30, 40.9],iconImageOffset: [-15, -40.9],}));
            }
            for (var i = 0, l = school.length; i < l; i++) {
                schoolCollection.add(new ymaps.Placemark(school[i], {hintContent: 'Школа',balloonContent: ''},{iconLayout: 'default#image',
                    iconImageHref: 'https://shaharcity.kz/assets/img/map/school.svg',iconImageSize: [30, 40.9],iconImageOffset: [-15, -40.9],}));
            }
            for (var i = 0, l = sport.length; i < l; i++) {
                sportCollection.add(new ymaps.Placemark(sport[i], {hintContent: 'Фитнес-центр',balloonContent: ''},{iconLayout: 'default#image',
                    iconImageHref: 'https://shaharcity.kz/assets/img/map/sport.svg',iconImageSize: [30, 40.9],iconImageOffset: [-15, -40.9],}));
            }
            for (var i = 0, l = shop.length; i < l; i++) {
                shopCollection.add(new ymaps.Placemark(shop[i], {hintContent: ' Супермаркет',balloonContent: ''},{iconLayout: 'default#image',
                    iconImageHref: 'https://shaharcity.kz/assets/img/map/shop.svg',iconImageSize: [30, 40.9],iconImageOffset: [-15, -40.9],}));
            }

            var myGeoObject = new ymaps.GeoObject({
                geometry: {
                    type: "Polygon",
                    coordinates: [
                        [
                            [43.268697724044316,76.81869032373122],
                            [43.26899564666741,76.82185533036878],
                            [43.26804699320786,76.82198944081954],
                            [43.26671414914125,76.82173731317215],
                            [43.26668670792519,76.82145836343463],
                            [43.26538911620028,76.82169439782788],
                            [43.26516566103726,76.81931796064072],
                            [43.26643973642009,76.81909801950148],
                            [43.26649069887679,76.81957545270613],
                            [43.26783157762204,76.81933546436036],
                            [43.26778530254043,76.81885458559722]]
                    ],
                    fillRule: "nonZero"
                },
                properties:{
                    balloonContent: "Alatau City"
                }
            }, {
                fillColor: '#B2B3B3',
                strokeWidth: 0,
                opacity: 1,
            });

            var myHome1 = new ymaps.GeoObject({
                geometry: {
                    type: "Polygon",
                    coordinates: [
                        [
                            [43.26720416875883,76.81940933171931],
                            [43.267163007263804,76.81896408502283],
                            [43.26775886617189,76.81886216108028],
                            [43.2678019873123,76.81930472556773]
                        ]
                    ],
                    fillRule: "nonZero"
                },
                properties:{
                    balloonContent: "Alatau City"
                }
            }, {
                fillColor: '#76c04e',
                strokeWidth: 0,
                opacity: 1,
            });

            var myHome2 = new ymaps.GeoObject({
                geometry: {
                    type: "Polygon",
                    coordinates: [
                        [
                            [43.26713164610591,76.81897213164989],
                            [43.267172807622316,76.81940933171931],
                            [43.266516180089035,76.81952734891595],
                            [43.26647697821961,76.81908746663753]
                        ]
                    ],
                    fillRule: "nonZero"
                },
                properties:{
                    balloonContent: "Alatau City"
                }
            }, {
                fillColor: '#76c04e',
                strokeWidth: 0,
                opacity: 1,
            });

            var line = new ymaps.GeoObject({
                geometry: {
                    type: "LineString",
                    coordinates: [
                        [43.267244861639135,76.81395290691304],
                        [43.26713173621728,76.81880629015576]
                    ]
                },
                properties:{
                }
            }, {
                strokeColor: "#464646",
                strokeWidth: 1.3
            });

            var dot_one = new ymaps.Circle([
                [43.267244861639135,76.81395290691304],
                8
            ], {}, {
                fillColor: "#464646",
                strokeWidth: 0
            });

            var dot_two = new ymaps.Circle([
                [43.26713173621728,76.81880629015576],
                8
            ], {}, {
                fillColor: "#464646",
                strokeWidth: 0
            });

            (marker = new ymaps.Placemark([43.267444861639135,76.81395290691304],
                {},
                {
                    iconLayout: 'default#image',
                    iconImageHref: 'https://cms.abpx.kz/storage/uploads/2021/12/23/61c3fdc9a7d44--2.svg',
                    iconImageSize: [144, 82],
                    iconImageOffset: [-77, -82],
                }
            )),
                searchMap.geoObjects.add(cildrenCollection);
            searchMap.geoObjects.add(medicalShopCollection);
            searchMap.geoObjects.add(medicalCollection);
            searchMap.geoObjects.add(schoolCollection);
            searchMap.geoObjects.add(sportCollection);
            searchMap.geoObjects.add(shopCollection);
            searchMap.geoObjects.add(myGeoObject);
            searchMap.geoObjects.add(myHome1);
            searchMap.geoObjects.add(myHome2);
            searchMap.geoObjects.add(line);
            searchMap.geoObjects.add(dot_one);
            searchMap.geoObjects.add(dot_two);
            searchMap.geoObjects.add(marker);
            searchMap.behaviors.disable('scrollZoom');
      }

      function closePreloader() {

        setTimeout( () => {
          fade(document.getElementById('preloader'))
        }
        ,0)

      }

      function creiateUserNotification() {
        if (localStorage.getItem('notificationCheck') != 'yes') {
          var notificationModalEl = document.getElementById('notificationModal')
          if (notificationModalEl) {
            let notificationModal = new bootstrap.Modal(notificationModalEl, {
              keyboard: false
            })
            notificationModal.show()

            let closeNotification = document.querySelector('#notificationModal .btn-close')
            closeNotification.addEventListener('click', () => { localStorage.setItem('notificationCheck', 'yes') })
            notificationModalEl.addEventListener('click', () => { localStorage.setItem('notificationCheck', 'yes') })
          }
        }
      }

      function fade(element) {
        var op = 1;  // initial opacity
        var timer = setInterval(function () {
          if (op <= 0.1){
            clearInterval(timer);
            element.style.display = 'none';
          }
          element.style.opacity = op;
          element.style.filter = 'alpha(opacity=' + op * 100 + ")";
          op -= op * 0.16;
        }, 0.1);
      }

      function sideBarToggle(condition) {
        let button = document.getElementById('sidebarToggle')
        let sideBar = document.querySelector('.sidebar')
        let bars = document.querySelector('.ham5')
        let sideBarPhone = document.querySelector('.call .phone')
        let mainPhone = document.querySelector('.contact-block__phone')

        sideBarPhone.href = 'tel:' + mainPhone.textContent
        sideBarPhone.textContent = mainPhone.textContent

        if (condition == 'open') {
          document.body.classList.remove('sidebarOpen')
          sideBar.classList.remove('open')
          button.setAttribute('data-condition', '')
        } else {
          document.body.classList.add('sidebarOpen')
          sideBar.classList.add('open')
          button.setAttribute('data-condition', 'open')
        }

        bars.classList.toggle('active')
      }

      function buildingStepsCarousel() {
        //Building Steps
        let slidesPerView = 3;
        let center = false;
        let margin = 1;

        if (window.innerWidth < 1350) {
          slidesPerView = 3;
        }

        if (window.innerWidth < 990) {
          slidesPerView = 2.3;
        }

        if (window.innerWidth < 768) {
          slidesPerView = 1.3;
          center = false
          margin = 10
        }

        if (window.innerWidth < 576) {
          slidesPerView = 1.2
          center = false
          margin = 10
        }

        var steps = new Swiper('.steps-swiper', {
          effect: null,
          loop: false,
          slidesPerView: slidesPerView,
          initialSlide: 0,
          keyboardControl: true,
          mousewheelControl: true,
          lazyLoading: true,
          centeredSlides: center,
          preventClicks: true,
          preventClicksPropagation: false,
          lazyLoadingInPrevNext: true,
          spaceBetween: margin,
            navigation: {
                nextEl: ".swiper-button-next",
                prevEl: ".swiper-button-prev",
            },
        });

        buildingStepsAutoHeight();

      }

      function buildingStepsAutoHeight() {

        //Set autoHeight
        let steps_items = document.querySelectorAll('.steps-swiper .swiper-slide');

        steps_items.forEach(function (step) {
          let height = (step.offsetWidth / 10) * 11;
          step.style.height = height;
        })

      }

      function advantagesCarousel() {
        //Advantages-swiper
        let advantagesCount = 4

        if (window.innerWidth < 1220) {
          advantagesCount = 3
        }
        if (window.innerWidth < 990) {
          advantagesCount = 2
        }
        if (window.innerWidth < 768) {
          advantagesCount = 1.3
        }
        if (window.innerWidth < 576) {
          advantagesCount = 1
        }

        var advantages = new Swiper('.advantages-swiper', {
          effect: false,
          loop: false,
          centeredSlides: false,
          slidesPerView: advantagesCount,
          initialSlide: 0,
          keyboardControl: true,
          mousewheelControl: true,
          lazyLoading: true,
          preventClicks: false,
          preventClicksPropagation: false,
          lazyLoadingInPrevNext: true,
          spaceBetween: 30,
          navigation: {
            nextEl: ".swiper-button-next",
            prevEl: ".swiper-button-prev",
          },
          pagination: {
            el: ".swiper-pagination",
          },
        })
      }

      function galleryCarousel() {

        var galery = new Swiper('.gallery-swiper', {
          loop: false,
          slidesPerView: "auto",
          initialSlide: 0,
          keyboardControl: true,
          mousewheelControl: true,
          autoHeight: true,
          spaceBetween: 20,
          navigation: {
            nextEl: ".swiper-button-next",
            prevEl: ".swiper-button-prev",
        }
        })

      }

      function creiateLightbox(data) {

        var lightbox = new FsLightbox()
        data = data.split(',')
        lightbox.props.sources = data
        lightbox.props.onInit
        lightbox.open()

      }

      function phoneValidator(){

        var phoneInputs = document.querySelectorAll('input[name="phone"]')
        phoneInputs.forEach((el) => {
          el.addEventListener('input', function (e) {
            clearMessages()
            let numberCodes = ['710','711','712','713','714','715','716','717','718','721','722','723','724','725','726','727','728','729','736','700','701','702','703','704','705','706','707','708','709','747','750','751','760','761','762','763','764','771','775','776','777','778']
            let x = e.target.value.replace(/\D/g, '').match(/(^\d{0,1})(\d{0,3})(\d{0,3})(\d{0,2})(\d{0,2})/);

            e.target.value = !x[3] ? "+" + x[1] + x[2] : "+" + x[1] + ' (' + x[2] + ') ' + x[3] + (x[4] ? '-' + x[4] : '') + (x[5] ? '-' + x[5] : '');

            let errMess = document.createElement('span')
            errMess.classList.add('input-err')
            errMess.textContent = translater.no_valid_number

            //console.log(numberCodes.indexOf(x[2]))
            if (x[3] && ((x[1] != '7') || (numberCodes.indexOf(x[2]) == -1))) {
              el.parentNode.appendChild(errMess)
            } else {
              clearMessages()
            }

          });
        })

      }

      function validatePhoneNumber(number) {
        if (number.match(/^\+\d{1} \(\d{3}\) \d{3}\-\d{2}\-\d{2}$/)) {
          return true
        } else {
          return false
        }
      }

      function clearMessages() {
        let messAll = document.querySelectorAll('.input-err')
        messAll.forEach((el) => {
          el.remove()
        })
      }

      function formValidator(element) {
        let errors = false
        let form = element.parentNode.parentNode
        let inputs = form.querySelectorAll('input, textarea')
        let userName = form.querySelector('[name="name"]')
        let formQuery = new Object()

        let preloader = document.createElement('div')
        preloader.classList.add('form-preloader')
        form.appendChild(preloader)

        if (userName.value == '') {
          userName.value = 'Не указано'
        }

        inputs.forEach(function (el) {

          if (el.hasAttribute("required") && el.value != "" || !el.hasAttribute("required") && el.value != "") {
            let id = el.id
            let name = el.getAttribute('fieldname')
            let data = el.value
            formQuery[''+id] = {name, data}
          } else {
            if (el.hasAttribute("required")) {
              el.setAttribute('style', 'border-color: red;')
              errors = true
            }
          }

          if (el.name == 'phone') {
            if (!validatePhoneNumber(el.value)) {
              clearMessages()
              let errMess = document.createElement('span')
              errMess.classList.add('input-err')
              errMess.textContent = translater.no_valid_number
              el.parentNode.appendChild(errMess)
              errors = true
            } else {
              clearMessages()
            }
          }

        })

        if (!errors) {
          let user_data = collect_user_data()
          formQuery = Object.assign(formQuery, user_data)
          formSendData(formQuery, form)
        } else {
          preloader.remove()
        }

      }

      function collect_user_data(){

        const url = new URL(document.location.href)
        let user_data = new Object()

        //UTM DATA
        if (url.searchParams.get('utm_source')) {
          let name = 'utm_source'
          let data = url.searchParams.get('utm_source')
          user_data['utm_source'] = {name: name, data: data}
        }

        if (url.searchParams.get('utm_medium')) {
          let name = 'utm_medium'
          let data = url.searchParams.get('utm_medium')
          user_data['utm_medium'] = {name: name, data: data}
        }

        if (url.searchParams.get('utm_campaign')) {
          let name = 'utm_campaign'
          let data = url.searchParams.get('utm_campaign')
          user_data['utm_campaign'] = {name: name, data: data}
        }

        if (url.searchParams.get('utm_term')) {
          let name = 'utm_term'
          let data = url.searchParams.get('utm_term')
          user_data['utm_term'] = {name: name, data: data}
        }

        if (url.searchParams.get('utm_content')) {
          let name = 'utm_content'
          let data = url.searchParams.get('utm_content')
          user_data['utm_content'] = {name: name, data: data}
        }

        //UserAgent
        if (window.navigator.userAgent) {
          let name = 'userAgent'
          let data = window.navigator.userAgent
          user_data['userAgent'] = {name: name, data: data}
        }

        //Cookie
        if (get_cookie('_ga')) {
          let name = '_ga'
          let data = get_cookie('_ga').split('.')
          data = data[data.length - 2] + '.' + data[data.length - 1]
          user_data['_ga'] = {name: name, data: data}
        }

        //GetCookie Function
        function get_cookie ( cookie_name )
        {
          var results = document.cookie.match ( '(^|;) ?' + cookie_name + '=([^;]*)(;|$)' );

          if ( results )
            return ( unescape ( results[2] ) );
          else
            return null;
        }

        return user_data

      }

      async function formSendData(formQuery, form) {
        let response = await fetch('?form=send_form', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json;charset=utf-8'
          },
          body: JSON.stringify(formQuery)
        });

        form.innerHTML = await response.text()

      }

      var newFilter = (function creiateFilter() {

        function getFloors(offers, filters) {
          let floorsBtnHtml = ""
          let floorsNumberArray = []
          for (var offer in offers) {
            for (var floor in offers[offer].floors) {
              if (!floorsNumberArray.includes(offers[offer].floors[floor])) {
                floorsNumberArray.push(offers[offer].floors[floor])
                floorsBtnHtml = floorsBtnHtml + '<a class="floor-buttons__item sections" data-filter="' + offers[offer].floors[floor] + '" href="#" onclick="frontend.filterClick(\'#floorButtons\', this.getAttribute(\'data-filter\')); frontend.filterCreiate(offersAll); return false">' + offers[offer].floors[floor] + '</a>'
              }
            }
          }
          let floors = document.getElementById('floorButtons');
          floors.innerHTML = floorsBtnHtml;
          if (filters.floor !== '') {
            let activeFloor = document.querySelector('#floorButtons [data-filter="' + filters.floor + '"]')
            if (activeFloor) {
              activeFloor.classList.add("active")
            } else {
              floors.firstElementChild.classList.add("active")
            }
          }
        }

        function getSquare(offers, filters) {
          let squareBtnHtml = ""
          let squareNumberArray = []
          for (var offer in offers) {
            if (!squareNumberArray.includes(offers[offer].square)) {
              squareNumberArray.push(offers[offer].square)
              squareBtnHtml = squareBtnHtml + '<a class="square square-buttons__item" data-filter="' + offers[offer].square + '" href="#" onclick="frontend.filterClick(\'#squareButtons\', this.getAttribute(\'data-filter\')); frontend.filterCreiate(offersAll); return false">' + offers[offer].square + ' м<sup>2</sup></a>'
            }
          }
          let square = document.getElementById('squareButtons')
          square.innerHTML = squareBtnHtml

          if (filters.square == '') {
            let activeSquare = document.querySelector('#squareButtons .square-buttons__item:first-child')
            activeSquare.classList.add("active");
          } else {
            let activeSquare = document.querySelector('#squareButtons [data-filter="' + filters.square + '"]');
            activeSquare.classList.add("active");
          }
        }

        function filterOffers(offersAll) {

          let offers = []
          for (let key in offersAll) {
            offers[key] = offersAll[key];
          }

          let filters = {
            square: document.querySelector('#squareButtons a.active') != null ? document.querySelector('#squareButtons a.active').getAttribute('data-filter') : '',
            floor: document.querySelector('#floorButtons a.active') != null ? document.querySelector('#floorButtons a.active').getAttribute('data-filter') : '',
          }

          getSquare(offers, filters)

          if (filters.square !== '') {
            for (var offer in offers) {
              if (offers[offer].square != filters.square) {
                delete offers[offer]
              }
            }
          }
          
          getFloors(offers, filters)

          if (filters.floor !== '') {
            for (var offer in offers) {
              if (!offers[offer].floors.includes(filters.floor)) {
                delete offers[offer]
              }
            }
          }

          renderOffers(offers)
          sortButtons('#floorButtons a')
          sortButtons('#squareButtons a')

        }

        function sortButtons(selector) {
          var nodeList = document.querySelectorAll(selector);
          var itemsArray = [];
          var parent = nodeList[0].parentNode;
          for (var i = 0; i < nodeList.length; i++) {
            itemsArray.push(parent.removeChild(nodeList[i]));
          }
          itemsArray.sort(function (nodeA, nodeB) {
            var textA = nodeA.getAttribute('data-filter');
            var textB = nodeB.getAttribute('data-filter');
            var numberA = parseInt(textA);
            var numberB = parseInt(textB);
            if (numberA < numberB) return -1;
            if (numberA > numberB) return 1;
            return 0;
          })
                  .forEach(function (node) {
                    parent.appendChild(node)
                  });
        }

        function renderOffers(offers) {
          const priceNode = document.querySelector('.location_price');
          const floorPlanNode = document.querySelector('.floor-plan__img');
          const locationPlanNode = document.querySelector('.locaton-plan__img');
          const buttonNode = document.querySelector('.download-link__location');
          const locations = offers.filter(el => {return el});
          const locationData = locations[0];

          priceNode.textContent = locationData.price + ' тг.';
          floorPlanNode.src = 'https://cms.abpx.kz' + locationData.floor_plan.path;
          locationPlanNode.src = 'https://cms.abpx.kz' + locationData.plan.path;
          buttonNode.href = 'https://cms.abpx.kz' + locationData.plan.path;
        }

        function startNewSwiper(offersAll) {
          let flats = new Swiper('.swiper-flats', {
            spaceBetween: 20,
            lazy: true,
            navigation: {
              nextEl: ".flat-next",
              prevEl: ".flat-prev",
            },
          })
        }

        function activateButton(parent, dataFilter) {
          let then = document.querySelector(parent + ' .active')
          let now = document.querySelector(parent + ' [data-filter="' + dataFilter + '"]')

          if (then != null) {
            then.classList.remove('active')
          }
          if (now != null) {
            now.classList.add('active')
          }

          if (parent == "#squareButtons") {
            let floorActive = document.querySelector('#floorButtons .active')
            if (floorActive != null) {
              floorActive.classList.remove('active')
            }
          }

        }

        return {
          filterOffers: filterOffers,
          activateButton: activateButton
        }

      })()

      function headerMenuLinks () {
        const menuItems = document.querySelectorAll('.nav-menu>li>a:not(.lang-switcher__item)');

        menuItems.forEach(item => {
            item.addEventListener('click', (event) => {
                const el = document.querySelector(item.getAttribute('href'));
                const headerHeight = document.querySelector('header').offsetHeight;

                window.scrollTo({
                    top: el.offsetTop - headerHeight,
                    behavior: "smooth"
                });

                console.log(el.offsetTop, headerHeight);

                event.preventDefault();
            });
        });
      }

      function activeMenuItem(scroll) {
        const menuItems = document.querySelectorAll('.nav-menu>li>a:not(.lang-switcher__item)');
        const headerHeight = document.querySelector('header').offsetHeight;
        const checkActivation = (scroll, elTop, elBottom) => { //return Bool
            if (scroll >= elTop && scroll <= elBottom) {
                return true;
            }

            return false;
        }
        const selectElement = (element) => {
            const oldSelect = document.querySelector('.nav-menu>li.active');

            oldSelect.classList.remove('active');
            element.classList.add('active');
        }

        menuItems.forEach(item => {
            const el = document.querySelector(item.getAttribute('href'));
            const isSelected = checkActivation(
                                    scroll, 
                                    el.offsetTop - headerHeight, 
                                    (el.offsetTop + el.offsetHeight) - headerHeight
                                );

            if (isSelected) {
                selectElement(item.parentNode);
            }
        });
      }
      
      function frontendReady() {
        authorMarker();
        // buildingStepsCarousel();
        galleryCarousel();
        // closePreloader();
        phoneValidator();
        // headerMenuLinks();
      }

      function frontendResize() {
        // buildingStepsCarousel();
      }

      function frontendScroll() {
        // paralaxSlider(window.pageYOffset);
        // activeMenuItem(window.pageYOffset);
        //Slider paralax
        var scrollPosition = 0
        //var decor1 = document.querySelector('.decor1')
        //var decor2 = document.querySelector('.decor2')
        var header = document.querySelector('header');
        let slider = document.getElementById('home');
        //var logo = document.querySelector('header a.navbar-brand img')

        if (window.pageYOffset < 700) {
          scroll1 = window.pageYOffset / 4;
          scroll2 = window.pageYOffset / 20;
          //decor1.style.transform = "translateY(-" + scroll1 + "px)"
          //decor2.style.transform = "translateY(-" + scroll2 + "px)"
        } else {
          if (!header.classList.contains('ymap')) {
            header.classList.add('ymap');
            ymaps.ready(frontend.yandex);
          }
        }

        if (window.pageYOffset > 450)	{
          // header.classList.add('fixed');
          // slider.style.marginTop = header.offsetHeight + 'px';
          // pt-4 pb-1
        } else {
          // header.classList.remove('fixed');
          // slider.style.marginTop = '0px';
        }

        if (window.pageYOffset > 650)	{
          if (!header.classList.contains('main-header--sticky')) {
            header.classList.add('main-header--sticky');
          }
        } else {
          if (header.classList.contains('main-header--sticky')) {
            header.classList.remove('main-header--sticky');
          }
        }
      }

      return {
        marker: authorMarker,
        steps: buildingStepsCarousel,
        advantages: advantagesCarousel,
        filterCreiate: newFilter.filterOffers,
        filterClick: newFilter.activateButton,
        lightBox: creiateLightbox,
        sidebar: sideBarToggle,
        map: creiateMap,
        yandex: yandexMap,
        form: formValidator,
        ready: frontendReady,
        resize: frontendResize,
        scroll: frontendScroll
      }

    })();

  	document.addEventListener("DOMContentLoaded", ()=>{ frontend.ready() });
  	window.addEventListener("resize", ()=>{ frontend.resize() });
  	document.addEventListener("scroll", ()=>{ frontend.scroll() });

    if (typeof offersAll !== "undefined") {
        frontend.filterCreiate(offersAll);
    }

  </script>

  {{ site_scripts_in_footer|raw }}

</html>
